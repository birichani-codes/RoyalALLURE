// Required packages
const express = require('express');
const axios = require('axios');
const router = express.Router();

// M-Pesa API credentials - store these in environment variables in production
const CONSUMER_KEY = 'vvhKAaFpdOK2K8o3PsdaJyTTxYTHKScObMxvPqkjXlBqEAL8';
const CONSUMER_SECRET = 'APU2PXaweU9pEhQ5qN8dVzGkNqE67lgVArbDGMBI0ezmeqhAhjtp8l5XZiQGEnrV';
const BUSINESS_SHORT_CODE = '174379'; // This is usually your Paybill or Till number
const PASSKEY = 'your-passkey'; // Provided by Safaricom
const BASE_URL = 'https://sandbox.safaricom.co.ke'; // Use production URL for live environment

// Generate OAuth token
async function generateToken() {
  try {
    const auth = Buffer.from(`${CONSUMER_KEY}:${CONSUMER_SECRET}`).toString('base64');
    const response = await axios.get(`${BASE_URL}/oauth/v1/generate?grant_type=client_credentials`, {
      headers: {
        'Authorization': `Basic ${auth}`
      }
    });
    return response.data.access_token;
  } catch (error) {
    console.error('Error generating token:', error);
    throw error;
  }
}

// Initiate STK Push (Lipa Na M-Pesa Online)
router.post('/stk-push', async (req, res) => {
  try {
    const { phoneNumber, amount } = req.body;
    
    // Validate input
    if (!phoneNumber || !amount) {
      return res.status(400).json({ error: 'Phone number and amount are required' });
    }
    
    // Format phone number (remove leading 0 and add country code if needed)
    let formattedPhone = phoneNumber;
    if (phoneNumber.startsWith('0')) {
      formattedPhone = '254' + phoneNumber.substring(1);
    }
    
    // Generate timestamp
    const timestamp = new Date().toISOString().replace(/[-T:.Z]/g, '').substring(0, 14);
    
    // Generate password
    const password = Buffer.from(`${BUSINESS_SHORT_CODE}${PASSKEY}${timestamp}`).toString('base64');
    
    // Get access token
    const token = await generateToken();
    
    // Prepare STK push request
    const stkPushResponse = await axios.post(
      `${BASE_URL}/mpesa/stkpush/v1/processrequest`,
      {
        BusinessShortCode: BUSINESS_SHORT_CODE,
        Password: password,
        Timestamp: timestamp,
        TransactionType: 'CustomerPayBillOnline',
        Amount: amount,
        PartyA: formattedPhone,
        PartyB: BUSINESS_SHORT_CODE,
        PhoneNumber: formattedPhone,
        CallBackURL: 'https://your-domain.com/api/mpesa/callback',
        AccountReference: 'Shopping Cart Payment',
        TransactionDesc: 'Payment for products purchased'
      },
      {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      }
    );
    
    // Return STK push response to client
    res.status(200).json(stkPushResponse.data);
  } catch (error) {
    console.error('STK push error:', error.response?.data || error.message);
    res.status(500).json({ error: 'Failed to process payment request' });
  }
});

// Callback URL for M-Pesa responses
router.post('/callback', (req, res) => {
  const response = req.body;
  
  // Log the callback response
  console.log('M-Pesa Callback Response:', JSON.stringify(response));
  
  // Process the callback response
  if (response.Body.stkCallback.ResultCode === 0) {
    // Payment successful
    const amount = response.Body.stkCallback.CallbackMetadata.Item.find(item => item.Name === 'Amount').Value;
    const mpesaReceiptNumber = response.Body.stkCallback.CallbackMetadata.Item.find(item => item.Name === 'MpesaReceiptNumber').Value;
    const phoneNumber = response.Body.stkCallback.CallbackMetadata.Item.find(item => item.Name === 'PhoneNumber').Value;
    
    // Here you would typically:
    // 1. Update your database with payment status
    // 2. Trigger order processing
    // 3. Send confirmation to user
    
    console.log(`Payment of KES ${amount} received from ${phoneNumber}. Receipt: ${mpesaReceiptNumber}`);
  } else {
    // Payment failed
    console.log(`Payment failed with code ${response.Body.stkCallback.ResultCode}: ${response.Body.stkCallback.ResultDesc}`);
  }
  
  // Acknowledge receipt of callback
  res.status(200).json({ success: true });
});

// Check transaction status
router.post('/transaction-status', async (req, res) => {
  try {
    const { transactionId } = req.body;
    const token = await generateToken();
    
    const response = await axios.post(
      `${BASE_URL}/mpesa/transactionstatus/v1/query`,
      {
        Initiator: 'testapi',
        SecurityCredential: 'your-security-credential', // Encrypted credential
        CommandID: 'TransactionStatusQuery',
        TransactionID: transactionId,
        PartyA: BUSINESS_SHORT_CODE,
        IdentifierType: '4',
        ResultURL: 'https://your-domain.com/api/mpesa/status-result',
        QueueTimeOutURL: 'https://your-domain.com/api/mpesa/status-timeout',
        Remarks: 'Transaction status query',
        Occasion: ''
      },
      {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      }
    );
    
    res.status(200).json(response.data);
  } catch (error) {
    console.error('Transaction status error:', error.response?.data || error.message);
    res.status(500).json({ error: 'Failed to get transaction status' });
  }
});

module.exports = router;