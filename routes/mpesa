// Required packages
const express = require('express');
const axios = require('axios');
const router = express.Router();

// M-Pesa API credentials - store these in environment variables in production
const CONSUMER_KEY = 'vvhKAaFpdOK2K8o3PsdaJyTTxYTHKScObMxvPqkjXlBqEAL8';
const CONSUMER_SECRET = 'APU2PXaweU9pEhQ5qN8dVzGkNqE67lgVArbDGMBI0ezmeqhAhjtp8l5XZiQGEnrV';
const BUSINESS_SHORT_CODE = '174379'; // This is usually your Paybill or Till number
const BASE_URL = 'https://sandbox.safaricom.co.ke'; // Use production URL for live environment

// Generate OAuth token
async function generateToken() {
  try {
    const auth = Buffer.from(`${CONSUMER_KEY}:${CONSUMER_SECRET}`).toString('base64');
    const response = await axios.get(`${BASE_URL}/oauth/v1/generate?grant_type=client_credentials`, {
      headers: {
        'Authorization': `Basic ${auth}`
      }
    });
    return response.data.access_token;
  } catch (error) {
    console.error('Error generating token:', error);
    throw error;
  }
}

// Register C2B URLs
router.post('/register-urls', async (req, res) => {
  try {
    const token = await generateToken();
    
    const response = await axios.post(
      `${BASE_URL}/mpesa/c2b/v1/registerurl`,
      {
        ShortCode: BUSINESS_SHORT_CODE,
        ResponseType: 'Completed', // Can be 'Cancelled' or 'Completed'
        ConfirmationURL: 'https://your-domain.com/api/mpesa/confirmation',
        ValidationURL: 'https://your-domain.com/api/mpesa/validation'
      },
      {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      }
    );
    
    res.status(200).json(response.data);
  } catch (error) {
    console.error('Error registering URLs:', error.response?.data || error.message);
    res.status(500).json({ error: 'Failed to register URLs' });
  }
});

// C2B Validation URL endpoint
router.post('/validation', (req, res) => {
  console.log('Validation request received:', JSON.stringify(req.body));
  
  // You can perform validation logic here, e.g., check if the account number exists
  // If everything is valid, return a success response
  
  res.status(200).json({
    ResultCode: 0,
    ResultDesc: 'Accepted'
  });
  
  // If validation fails, you would return:
  // res.status(200).json({
  //   ResultCode: 1,
  //   ResultDesc: 'Rejected'
  // });
});

// C2B Confirmation URL endpoint
router.post('/confirmation', (req, res) => {
  const payment = req.body;
  console.log('Payment confirmation received:', JSON.stringify(payment));
  
  // Process the payment data
  // Typical C2B data structure:
  // {
  //   TransactionType: 'Pay Bill',
  //   TransID: 'C2BXXXXXXXXX',
  //   TransTime: '20200412195247',
  //   TransAmount: '1000',
  //   BusinessShortCode: '174379',
  //   BillRefNumber: 'account_reference',
  //   InvoiceNumber: '',
  //   OrgAccountBalance: '',
  //   ThirdPartyTransID: '',
  //   MSISDN: '254712345678',
  //   FirstName: 'John',
  //   MiddleName: '',
  //   LastName: 'Doe'
  // }
  
  try {
    // Extract important details
    const transactionId = payment.TransID;
    const amount = payment.TransAmount;
    const accountReference = payment.BillRefNumber;
    const phoneNumber = payment.MSISDN;
    const customerName = `${payment.FirstName} ${payment.MiddleName} ${payment.LastName}`.trim();
    
    // Here you would typically:
    // 1. Update your database with payment information
    // 2. Fulfill the customer's order or service
    // 3. Send confirmation to user if needed
    
    console.log(`Payment of KES ${amount} received from ${customerName} (${phoneNumber}). Reference: ${accountReference}, TransactionID: ${transactionId}`);
    
    // Always acknowledge receipt of the confirmation
    res.status(200).json({ ResultCode: 0, ResultDesc: 'Confirmation received successfully' });
  } catch (error) {
    console.error('Error processing confirmation:', error);
    // Still return success to M-Pesa to acknowledge receipt
    res.status(200).json({ ResultCode: 0, ResultDesc: 'Confirmation received' });
  }
});

// Simulate a C2B payment (for testing in sandbox)
router.post('/simulate-c2b', async (req, res) => {
  try {
    const { phoneNumber, amount, accountReference } = req.body;
    
    // Validate input
    if (!phoneNumber || !amount) {
      return res.status(400).json({ error: 'Phone number and amount are required' });
    }
    
    // Format phone number (remove leading 0 and add country code if needed)
    let formattedPhone = phoneNumber;
    if (phoneNumber.startsWith('0')) {
      formattedPhone = '254' + phoneNumber.substring(1);
    }
    
    // Get access token
    const token = await generateToken();
    
    // Simulate C2B transaction (only works in sandbox environment)
    const response = await axios.post(
      `${BASE_URL}/mpesa/c2b/v1/simulate`,
      {
        ShortCode: BUSINESS_SHORT_CODE,
        CommandID: 'CustomerPayBillOnline',
        Amount: amount,
        Msisdn: formattedPhone,
        BillRefNumber: accountReference || 'TEST'
      },
      {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      }
    );
    
    res.status(200).json(response.data);
  } catch (error) {
    console.error('C2B simulation error:', error.response?.data || error.message);
    res.status(500).json({ error: 'Failed to simulate C2B transaction' });
  }
});

// Transaction status query (unchanged from original)
router.post('/transaction-status', async (req, res) => {
  try {
    const { transactionId } = req.body;
    const token = await generateToken();
    
    const response = await axios.post(
      `${BASE_URL}/mpesa/transactionstatus/v1/query`,
      {
        Initiator: 'testapi',
        SecurityCredential: 'your-security-credential', // Encrypted credential
        CommandID: 'TransactionStatusQuery',
        TransactionID: transactionId,
        PartyA: BUSINESS_SHORT_CODE,
        IdentifierType: '4',
        ResultURL: 'https://your-domain.com/api/mpesa/status-result',
        QueueTimeOutURL: 'https://your-domain.com/api/mpesa/status-timeout',
        Remarks: 'Transaction status query',
        Occasion: ''
      },
      {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      }
    );
    
    res.status(200).json(response.data);
  } catch (error) {
    console.error('Transaction status error:', error.response?.data || error.message);
    res.status(500).json({ error: 'Failed to get transaction status' });
  }
});

module.exports = router;